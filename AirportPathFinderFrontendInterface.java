import java.util.List;
import javafx.stage.Stage;


/**
 * Defines an application that allows the user to
 * find the shortest route between a start and an end airport,
 * with additional ability to add another airport that must be included
 * on the generated route.
 * @author Cameron
 *
 */
public interface AirportPathFinderFrontendInterface {
	// public AirportPathFinderFrontend ();
	// AirportPathBDInterface backend;
	
  
  /**
   *  calls drawMap(). Lets user do the following:
   *          1) UI lets the user choose to find a route,
   *          2) Three airport mode
   *          3) quit program
   *          4) reset map (if path(s)/ anything else) have been drawn 
   * @param stage
   */
	public void start(final Stage stage); 
			

	/**
	 * Gets airport and edge data from backend and displays it to the window
	 */
	public void drawMap(); 

	
	/**
	 * Lets the user pick start and end airports to generate the shortest path between them
	 */
	public void createRoute();
				
	
    /**
     * similar to createRoute(), but lets the user select three airports instead 
     */	
	public void createRouteThreeAirports(); 
			
	/**
	 * resets the map with any user input data
	 */
	public void resetMap(); 
	
	/**
	 * takes a path generated by the BD and draws it to the map 
	 * (path is list of airport codes (e.g. "LAX") )
	 */
	public void drawPath(List<String> path); 


	// takes in userâ€™s input when user clicks on airport on the map 
	// (gets the airport code e.g. "LAX )
	//public String getAirport(); 
	
	//unneeded ^
	
	
	
}
